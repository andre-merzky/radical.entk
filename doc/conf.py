# -*- coding: utf-8 -*-
#
# radical.ensemblemd documentation build configuration file, created by
# sphinx-quickstart on Thu Jul 24 13:51:41 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import glob
import imp
import sys
import os

script_dir = os.path.dirname(os.path.realpath(__file__))

################################################################################
##
print "* Generating Application kernel list: kernels.rst"

try:
    os.remove("{0}/kernels.rst".format(script_dir))
    for fl in glob.glob("{0}/_generated_kernel_*".format(script_dir)):
        os.remove(fl)
except OSError:
    pass

with open ("{0}/kernels.rst".format(script_dir), "w") as toc:
    toc.write("Available Application Kernels\n")
    toc.write("*****************************\n")
    toc.write("\n")
    toc.write(".. toctree::\n")
    toc.write("   :maxdepth: 1\n\n")
    toc.write("\n\n")

# with open("{0}/kernels.rst".format(script_dir), "w") as kernels:
#     kernels.write("Application Kernels\n")
#     kernels.write("===================\n")

    from radical.ensemblemd.engine.engine import Engine
    e = Engine()
    for kernel in  e._kernel_plugins:
        ki = kernel().get_info()
        kernel_rst_filename = "_generated_kernel_{0}.rst".format(ki["name"])
        with open("{0}/{1}".format(script_dir, kernel_rst_filename), "w") as kernel_rst:

            try:
                # ki = kernel().get_info()
                # print " > {0}".format(ki["name"])
                # kernels.write("{0}\n".format(ki["name"]))
                # kernels.write("{0}\n\n".format("-"*len(ki["name"])))
                # kernels.write("{0}\n\n".format(ki["description"]))

                # kernels.write("**Arguments:**\n\n")
                # kernels.write(".. code-block:: python\n\n")
                # kernels.write("    {0}\n\n".format(ki["arguments"]))



                kernel_rst.write("{0}\n".format(ki["name"]))
                kernel_rst.write("{0}\n\n".format("-"*len(ki["name"])))
                kernel_rst.write("{0}\n\n".format(ki["description"]))
                kernel_rst.write("**Arguments:**\n\n")

                if ki["arguments"] == "*":
                    kernel_rst.write("This Kernel takes the same arguments and command-line parameters as the as the encapsulated tool.\n\n")

                else:
                    kernel_rst.write("+----------------------+----------------------------------------------------------------------------------+-----------+\n")
                    kernel_rst.write("| Argument Name        | Description                                                                      | Mandatory |\n")
                    kernel_rst.write("+======================+==================================================================================+===========+\n")
                    for arg, cfg in ki["arguments"].iteritems():
                        kernel_rst.write("| {:20s} | {:80s} | {:9b} |\n".format(arg, cfg["description"], cfg["mandatory"] ))
                        kernel_rst.write("+----------------------+----------------------------------------------------------------------------------+-----------+\n")

                kernel_rst.write("\n**Machine Configurations:**\n\n")
                kernel_rst.write("Machine configurations describe specific configurations of the tool on a specific platform. ``*`` is a catch-all for all hosts for which no specific configuration exists.\n\n")

                for key, cfg in ki["machine_configs"].iteritems():
                    kernel_rst.write("\n* Key: **{0}**\n\n".format(key))
                    for k, v in cfg.iteritems():
                        kernel_rst.write("  * {0}: ``{1}``\n".format(k,v))

                toc.write("   {0}\n".format(kernel_rst_filename))


            except Exception, ex:
                print "=== WARNING: %s " % str(ex)
##
################################################################################


################################################################################
##
print "* Generating code example list: examples.rst"

try:
    os.remove("{0}/examples.rst".format(script_dir))
    for fl in glob.glob("{0}/_generated_example_*".format(script_dir)):
        os.remove(fl)
except OSError:
    pass

with open ("{0}/examples.rst".format(script_dir), "w") as toc:
    toc.write("Examples Library\n")
    toc.write("****************\n")
    toc.write("\n")
    toc.write(".. toctree::\n")
    toc.write("   :maxdepth: 0\n")
    toc.write("\n")

    examples = os.listdir("{0}/../examples/".format(script_dir))
    for example in examples:

      foo = None

      if example.endswith(".py") is False:
          continue # skip all non-python files

      try:
          foo = imp.load_source('{0}'.format(example.split(".")[0]), "../examples/{0}".format(example)) 
          example_name = foo.__example_name__

          example_rst_filename = "_generated_example_"+example.replace(".py", ".rst")
          with open("{0}/{1}".format(script_dir, example_rst_filename), "w") as example_rst:

              example_rst.write("{0}\n".format(example_name))
              example_rst.write("{0}\n\n".format("-"*len(foo.__example_name__)))
              example_rst.write(foo.__doc__+"\n")
              example_rst.write(":download:`Download example: {0} <../examples/{0}>`\n\n".format(example))
              example_rst.write(".. literalinclude:: ../examples/{0}\n".format(example))
              example_rst.write("   :linenos:\n")
              example_rst.write("   :start-after: __example_name__\n\n")

              toc.write("   {0}\n".format(example_rst_filename))

      except Exception, ex:
          print "=== WARNING: %s " % str(ex)
##
################################################################################


################################################################################
##
print "* Generating use-case proof-of-concept list: examples.rst"

try:
    os.remove("{0}/_generated_usecases.rst".format(script_dir))
except OSError:
    pass

with open("{0}/_generated_usecases.rst".format(script_dir), "w") as poc:

    sub_dirs = os.listdir("{0}/../usecases/".format(script_dir))
    for sub_dir in sub_dirs:
        examples = os.listdir("{0}/../usecases/{1}".format(script_dir, sub_dir))

        for example in examples:

            if example.endswith(".py") is False:
                continue # skip all non-python files

            try:
                foo = imp.load_source('{0}'.format(example.split(".")[0]), "../usecases/{0}/{1}".format(sub_dir, example))

                poc.write("{0}\n".format(foo.__use_case_name__))
                poc.write("{0}\n\n".format("-"*len(foo.__use_case_name__)))
                poc.write(foo.__doc__+"\n")

                poc.write(":download:`Download example: {0} <../usecases/{0}/{1}>`\n\n".format(sub_dir, example))
                poc.write(".. literalinclude:: ../usecases/{0}/{1}\n\n".format(sub_dir, example))
            except Exception, ex:
                print "=== WARNING: %s " % str(ex)
##
################################################################################


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'radical.ensemblemd'
copyright = u'2014, The Radical Group at Rutgers University'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = open("{0}/../src/radical/ensemblemd/VERSION".format(script_dir), "r").readline()
# The full version, including alpha/beta/rc tags.
release = open("{0}/../src/radical/ensemblemd/VERSION".format(script_dir), "r").readline()

try:
    os.remove("{0}/_generated_version.rst".format(script_dir))
except OSError:
    pass

with open("{0}/_generated_version.rst".format(script_dir), "w") as gv:
    gv.write(".. |VERSION| replace:: {version}\n".format(version=version))

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'examples_toc.rst', 'kernels_toc.rst', '_generated_usecases.rst']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'radicalensemblemddoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'radicalensemblemd.tex', u'radical.ensemblemd Documentation',
   u'The Radical Group at Rutgers University', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'radicalensemblemd', u'radical.ensemblemd Documentation',
     [u'The Radical Group at Rutgers University'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'radicalensemblemd', u'radical.ensemblemd Documentation',
   u'The Radical Group at Rutgers University', 'radicalensemblemd', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

autodoc_member_order = 'bysource'

